syntax = "proto3";

package vega.commands.v1;

import "vega/chain_events.proto";
import "vega/commands/v1/signature.proto";
import "vega/vega.proto";

option go_package = "code.vegaprotocol.io/vega/protos/vega/commands/v1";

// A validator command which is sent automatically at regular intervals by any validator participating in the network.
// It is used to allow the network to know whether a validator is active, or if they have shut down.
message ValidatorHeartbeat {
  // Node ID of the validator emitting the heartbeat.
  string node_id = 1;
  // Signature from the validator made using their Ethereum wallet.
  Signature ethereum_signature = 2;
  // Signature from the validator made using their Vega wallet.
  Signature vega_signature = 3;
  // Message which has been signed.
  string message = 4;
}

// A command that allows a new node operator to announce themselves to the network as a new validator.
message AnnounceNode {
  // Vega public key of the node being announced.
  string vega_pub_key = 1;
  // Ethereum public key of the node being announced.
  string ethereum_address = 2;
  // Public key for the blockchain, currently the node's CometBFT key.
  string chain_pub_key = 3;
  // URL to the node operators homepage allowing stake holders to make an informed decision when delegating.
  string info_url = 4;
  // Country code (ISO 3166-1 alpha-2) for the location of the node.
  string country = 5;
  // Node ID of the validator, which is the node's public master key.
  string id = 6;
  // Human-readable name of the node.
  string name = 7;
  // URL to the node operator's avatar.
  string avatar_url = 8;
  // Vega public key derivation index.
  uint32 vega_pub_key_index = 9;
  // Epoch from which the node is expected to be ready to validate blocks.
  uint64 from_epoch = 10;
  // Signature from the node made using the ethereum wallet.
  Signature ethereum_signature = 11;
  // Signature from the node made using the Vega wallet.
  Signature vega_signature = 12;
  // Ethereum public key to use as a submitter to allow automatic signature generation.
  string submitter_address = 13;
}

// A validator command which is sent automatically by a node when it has verified a resource external to the network.
message NodeVote {
  // Previous public key field.
  reserved 1;
  // Reference identifying the resource that has been verified.
  string reference = 2;
  // Type of external event that has been verified.
  Type type = 3;

  enum Type {
    // Represents an unspecified or missing value from the input
    TYPE_UNSPECIFIED = 0;
    // Node vote for a new stake deposit
    TYPE_STAKE_DEPOSITED = 1;
    // Node vote for a new stake removed event
    TYPE_STAKE_REMOVED = 2;
    // Node vote for a new collateral deposit
    TYPE_FUNDS_DEPOSITED = 3;
    // Node vote for a new signer added to the erc20 bridge
    TYPE_SIGNER_ADDED = 4;
    // Node vote for a signer removed from the erc20 bridge
    TYPE_SIGNER_REMOVED = 5;
    // Node vote for a bridge stopped event
    TYPE_BRIDGE_STOPPED = 6;
    // Node vote for a bridge resumed event
    TYPE_BRIDGE_RESUMED = 7;
    // Node vote for a newly listed asset
    TYPE_ASSET_LISTED = 8;
    // Node vote for an asset limits update
    TYPE_LIMITS_UPDATED = 9;
    // Node vote to share the total supply of the staking token
    TYPE_STAKE_TOTAL_SUPPLY = 10;
    // Node vote to update the threshold of the signer set for the multisig contract
    TYPE_SIGNER_THRESHOLD_SET = 11;
    // Node vote to validate a new assert governance proposal
    TYPE_GOVERNANCE_VALIDATE_ASSET = 12;
    // Node vote for an Ethereum contract call result
    TYPE_ETHEREUM_CONTRACT_CALL_RESULT = 13;
  }
}

// Kind of signature created by a node, for example, allow-listing a new asset, withdrawal etc
enum NodeSignatureKind {
  // Represents an unspecified or missing value from the input.
  NODE_SIGNATURE_KIND_UNSPECIFIED = 0;
  // Represents a signature for a new asset allow-listing.
  NODE_SIGNATURE_KIND_ASSET_NEW = 1;
  // Represents a signature for an asset withdrawal.
  NODE_SIGNATURE_KIND_ASSET_WITHDRAWAL = 2;
  // Represents a signature for a new signer added to the erc20 multisig contract.
  NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_ADDED = 3;
  // Represents a signature for a signer removed from the erc20 multisig contract.
  NODE_SIGNATURE_KIND_ERC20_MULTISIG_SIGNER_REMOVED = 4;
  // Represents a signature for an asset update allow-listing.
  NODE_SIGNATURE_KIND_ASSET_UPDATE = 5;
}

// A validator command sent automatically containing a signature that can be used on a foreign chain to process an action.
message NodeSignature {
  // ID of the resource that the signature relates to.
  string id = 1;
  // Signature generated by the node.
  bytes sig = 2;
  // Kind of resource being signed.
  NodeSignatureKind kind = 3;
}

// A validator command sent automatically that provides information of events that have happened on foreign chains.
message ChainEvent {
  reserved 1003, 1004;
  // ID of the transaction on the foreign chain that caused the event.
  string tx_id = 1;
  // Arbitrary one-time integer used to prevent replay attacks.
  uint64 nonce = 2;
  // Event being forwarded.
  oneof event {
    // Built-in asset event.
    vega.BuiltinAssetEvent builtin = 1001;
    // Ethereum ERC20 event.
    vega.ERC20Event erc20 = 1002;
    // Ethereum Staking event.
    vega.StakingEvent staking_event = 1005;
    // Ethereum ERC20 multisig event.
    vega.ERC20MultiSigEvent erc20_multisig = 1006;
    // Ethereum contract call event.
    vega.EthContractCallEvent contract_call = 1007;
  }
}

// A validator command sent manually that allows a node operator to indicate to the network that their node's Vega key will be rotated.
message KeyRotateSubmission {
  // New Vega public key derivation index.
  uint32 new_pub_key_index = 1;
  // Block height at which the key rotation will take effect.
  uint64 target_block = 2;
  // Vega public key that would be rotated to.
  string new_pub_key = 3;
  // Hash of the node's current Vega public key.
  string current_pub_key_hash = 4;
}

// A validator command sent manually that allows a node operator to indicate to the network that their node's Ethereum key will be rotated.
message EthereumKeyRotateSubmission {
  // Block height at which the key rotation will take effect.
  uint64 target_block = 1;
  // Ethereum address that is being rotated to.
  string new_address = 2;
  // Ethereum address of the node's current Ethereum keys.
  string current_address = 3;
  // Ethereum public key to use as a submitter to allow automatic signature generation.
  string submitter_address = 4;
  // Signature signed by the new Ethereum key that can be verified to prove ownership.
  Signature ethereum_signature = 5;
}

// A validator command sent automatically to reach consensus on floating point values.
message StateVariableProposal {
  // Details of the state variable being proposed.
  vega.StateValueProposal proposal = 1;
}

// A validator command sent manually by a node operator to propose a protocol upgrade.
message ProtocolUpgradeProposal {
  // Block height at which to perform the upgrade.
  uint64 upgrade_block_height = 1;
  // Release tag for the Vega binary.
  string vega_release_tag = 2;
}
